<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Hans Blog - 寫程式</title><link href="//www.hansliu.com/" rel="alternate"></link><link href="//www.hansliu.com/feeds/xie-cheng-shi.atom.xml" rel="self"></link><id>//www.hansliu.com/</id><updated>2018-03-26T22:00:00+08:00</updated><entry><title>MySQL 5.7 Replication 筆記</title><link href="//www.hansliu.com/posts/2018/03/mysql57-replication-note.html" rel="alternate"></link><published>2018-03-26T22:00:00+08:00</published><updated>2018-03-26T22:00:00+08:00</updated><author><name>Hans Liu</name></author><id>tag:www.hansliu.com,2018-03-26:/posts/2018/03/mysql57-replication-note.html</id><summary type="html">&lt;p&gt;記錄一下處理 MySQL 5.7 Replication 的時候遇到的問題。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;MySQL Replication Formats&lt;/li&gt;
&lt;li&gt;MySQL Transation Islolation Level&lt;/li&gt;
&lt;li&gt;MySQL Global Transaction ID&lt;/li&gt;
&lt;li&gt;MySQL Ssl-version, Ssl-cipher …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;記錄一下處理 MySQL 5.7 Replication 的時候遇到的問題。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;MySQL Replication Formats&lt;/li&gt;
&lt;li&gt;MySQL Transation Islolation Level&lt;/li&gt;
&lt;li&gt;MySQL Global Transaction ID&lt;/li&gt;
&lt;li&gt;MySQL Ssl-version, Ssl-cipher&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="mysql-replication-formats"&gt;
&lt;h2&gt;MySQL Replication Formats&lt;/h2&gt;
&lt;p&gt;MySQL 之所以可以實現 replication 之間的複製，是因為將 master 資料庫發生的事件寫到了 binlog 中，然後在 slave 資料庫上讀取並執行這些事件。&lt;/p&gt;
&lt;p&gt;MySQL 5.7 寫入 binlog 的格式有三種：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SBR (statement binlog replication)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 master 會記錄執行的語句到 binlog 中，然後 slave 會讀取並再次執行相同的語句。&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;優點&lt;/dt&gt;
&lt;dd&gt;在 SBR 模式下，減少了 binlog 檔案量，節省 I/O 以及存儲資源，提高性能。因為它不需要記錄每一行數據的變化，只需要記錄在 master 上所執行的語句的細節，以及執行語句時候的上下文的信息。&lt;/dd&gt;
&lt;dt&gt;缺點&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;在 SBR 模式下，由於它是記錄執行的語句，為了讓這些語句在 slave 端也能正確執行，它還必須記錄每條語句在執行的時候的一些相關信息，也就是上下文信息，以保證所有語句在 slave 端被執行的時候能夠得到和在 master 端執行時候相同的結果，這樣的設計無法支援 MySQL 隨著時代發展而誕生的新函數與功能。&lt;/p&gt;
&lt;p class="last"&gt;目前在 SBR 模式中就有不少已知的特定情況會造成複製出現問題，主要是修改數據的時候使用了某些特定的函數或者功能的時候會出現，比如：sleep() 函數在有些版本中就不能被正確複製，在存儲過程中使用了 last_insert_id() 函數，可能會使 slave 和 master 上得到不一致的 id 等等。由於 RBR 模式是基於每一行來記錄的變化，所以不會出現類似的問題。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;strong&gt;RBR (row binlog replication)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 master 會將每一行數據的修改形式記錄到 binlog 中，然後 slave 讀取該數據的修改形式並執行。&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;優點&lt;/dt&gt;
&lt;dd&gt;在 RBR 模式下，binlog 中不用記錄執行的 SQL 語句的上下文信息，僅僅只需要記錄那一條記錄被修改與修改的結果，所以 binlog 的內容會非常容易理解。而且不會出現某些特定情況下的存儲過程或函數，以及觸發器的調用和触發無法被正確複製的問題。&lt;/dd&gt;
&lt;dt&gt;缺點&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;在 RBR 模式下，所有的執行的語句當記錄到 binlog 檔案中的時候，都將以每行記錄的修改來記錄，這樣可能會產生大量的 binlog 內容，比如有一條更新或刪除的語句：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
UPDATE product SET owner_member_id ='b' WHERE owner_member_id ='a'
DELETE FROM log WHERE createtime &amp;lt; DATE_SUB(NOW(), INTERVAL 1 month)
&lt;/pre&gt;
&lt;p class="last"&gt;執行之後，binlog 記錄的不是這條更新或刪除語句所對應的事件，而是這條語句所更新的每一條記錄的變化情況，這樣就記錄成很多條記錄被更新的很多個事件。自然 binlog 檔案的量就會很大。尤其是當執行修改表之類的語句的時候，產生的 binlog 檔案量是驚人的。因為 MySQL 對於改變資料表結構之類的變更語句的處理方式是整個資料表的每一條記錄都需要變動，實際上就是重建了整個資料表。可以想像該資料表的每一條記錄都會被記錄到 binlog 中。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;strong&gt;MBR (mixed binlog replication)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;從 MySQL 5.1.8 之後開始提供的第三種模式, 交由 MySQL 根據語法去決定要用 statement 或是 row 來記錄 binlog。&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;refer. &lt;a class="reference external" href="https://dev.mysql.com/doc/refman/5.7/en/replication-formats.html"&gt;https://dev.mysql.com/doc/refman/5.7/en/replication-formats.html&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;refer. &lt;a class="reference external" href="https://dev.mysql.com/doc/refman/5.7/en/replication-sbr-rbr.html"&gt;https://dev.mysql.com/doc/refman/5.7/en/replication-sbr-rbr.html&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;refer. &lt;a class="reference external" href="http://www.simlinux.com/2012/07/06/mysql-binlog-format.html"&gt;http://www.simlinux.com/2012/07/06/mysql-binlog-format.html&lt;/a&gt; (中文)&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mysql-transation-islolation-level"&gt;
&lt;h2&gt;MySQL Transation Islolation Level&lt;/h2&gt;
&lt;p&gt;隔離性是交易的保證之一，表示交易與交易之間不互相干擾，好像同時間就只有自己的交易存在一樣，隔離性保證的基本方式是在資料庫層面，對資料庫或相關欄位鎖定，在同一時間內只允許一個交易進行更新或讀取。&lt;/p&gt;
&lt;p&gt;但完全的鎖定資料庫在事務上並不會這麼做，因為完全的鎖定資料庫將導致嚴重的效能問題，因此實務上會根據資料讀寫更新的頻繁性，設定不同的交易隔離層級 (transaction isolation level)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;READ COMMITTED&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;至少保證：「A 交易已更新但尚未確認的資料，B 交易僅可作讀取動作」。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可避免 lost update 的問題，交易資料庫引擎採取的最低隔離層級，這個隔離層級讀取錯誤資料的機率太高，一般不會採用這種隔離層級。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;READ UNCOMMITTED&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;至少保證：「A 與 B 交易讀取的資料必須是已確認的資料」。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可避免 dirty read 以下問題。基本作法是，讀取的交易不會阻止其它的交易，一個未確認的更新交易會阻止其它所有的交易，但這影響效能較大，另一個基本作法是交易正在更新，尚未確定前都先操作暫存表格。&lt;/p&gt;
&lt;p&gt;RBR 支援，使用 RBR 的時候可以設定 READ UNCOMMITTED。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;REPEATABLE READ&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;至少保證：「同一 A 交易內兩次讀取的資料必須相同」。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可避免 unrepeatable read 以下問題。基本作法是，讀取交易不會阻止其它讀取的交易，但阻止其它寫入的交易，但這影響效能較大，另一基本作法是，一個交易正在讀取，尚未確認前，另一交易要更新給予暫存表格。&lt;/p&gt;
&lt;p&gt;SBR 支援，使用 SBR 的時候只能設定 REPEATABLE READ。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SERIALIZABLE&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;最嚴格的隔離層級，只要交易有不一致的疑慮，交易就必須循序，也就是 B 交易的更新與讀取都需要在 A 交易的更新之後。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可避免 phantom read 以下問題，因為交易資料必須循序，會嚴重影響交易資料庫效能，一般不會採用這種隔離層級。&lt;/p&gt;
&lt;p&gt;InnoDB 在設計上支援全部四種隔離層級，而且 InnoDB 為了避免 phantom read 做了一個東西叫 next-key locking ，所以在 InnoDB 你可以假裝 phantom read 不存在。&lt;/p&gt;
&lt;p&gt;另外 InnoDB 又實做了名叫 multi-versioned concurrency control 的功能，以達到 consistent nonlocking reads 。其實就是 InnoDB 可以同時維護多個版本的資料表資料，所以可以減少 READ COMMITTED 和 REPEATABLE READ 這兩個隔離層級加在資料表上的鎖，讓系統效能更好。&lt;/p&gt;
&lt;table border="1" class="colwidths-given basic docutils"&gt;
&lt;caption&gt;以下整理不同交易隔離層級對多個交易並行處理的影響&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;交易隔離層級&lt;/td&gt;
&lt;td&gt;Dirty Read&lt;/td&gt;
&lt;td&gt;Unrepeatable Read&lt;/td&gt;
&lt;td&gt;Phantom Read&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Read uncommitted&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Read committed&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Repreatable read&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Serializable&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;refer. &lt;a class="reference external" href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html"&gt;https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;refer. &lt;a class="reference external" href="https://dev.mysql.com/doc/refman/5.7/en/innodb-next-key-locking.html"&gt;https://dev.mysql.com/doc/refman/5.7/en/innodb-next-key-locking.html&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;refer. &lt;a class="reference external" href="https://openhome.cc/Gossip/HibernateGossip/IsolationLevel.html"&gt;https://openhome.cc/Gossip/HibernateGossip/IsolationLevel.html&lt;/a&gt; (中文)&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mysql-global-transaction-id"&gt;
&lt;h2&gt;MySQL Global Transaction ID&lt;/h2&gt;
&lt;p&gt;Global Transaction ID (GTID) 是 MySQL 5.6 以後新的機制，加強資料庫做 replication 的能力，保證一致性、降低故障率，提高容錯力。&lt;/p&gt;
&lt;p&gt;GTID 是一個全域唯一的編號，在 MySQL 中，GTID 實際上是由 UUID+TID 組成的。&lt;/p&gt;
&lt;p&gt;然而，因為 binlog+pos 的傳統作法也可以正常運作，所以實務上並沒有一定要採用 GTID 的需求，大多設置 GTID_MODE 為 ON_PERMISSIVE。&lt;/p&gt;
&lt;p&gt;在 MySQL 5.7.6 之後支援線上開啟和關閉 GTID&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;線上開啟 GTID&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
SET &amp;#64;&amp;#64;GLOBAL.ENFORCE_GTID_CONSISTENCY = WARN;
# if no error output
SET &amp;#64;&amp;#64;GLOBAL.ENFORCE_GTID_CONSISTENCY = ON;
# GTID_MODE is OFF
SET &amp;#64;&amp;#64;GLOBAL.GTID_MODE = OFF_PERMISSIVE;
SET &amp;#64;&amp;#64;GLOBAL.GTID_MODE = ON_PERMISSIVE;
SHOW STATUS LIKE 'ONGOING_ANONYMOUS_TRANSACTION_COUNT';
# ONGOING_ANONYMOUS_TRANSACTION_COUNT is 0
SET &amp;#64;&amp;#64;GLOBAL.GTID_MODE = ON;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;線上關閉 GIID&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# GTID_MODE is ON
SET &amp;#64;&amp;#64;GLOBAL.GTID_MODE = ON_PERMISSIVE;
SET &amp;#64;&amp;#64;GLOBAL.GTID_MODE = OFF_PERMISSIVE;
SELECT &amp;#64;&amp;#64;GLOBAL.GTID_OWNED;
# wait GTID_OWNED become empty
SET &amp;#64;&amp;#64;GLOBAL.GTID_MODE = OFF;
SET &amp;#64;&amp;#64;GLOBAL.ENFORCE_GTID_CONSISTENCY = OFF;
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;refer. &lt;a class="reference external" href="https://dev.mysql.com/doc/refman/5.7/en/replication-gtids-concepts.html"&gt;https://dev.mysql.com/doc/refman/5.7/en/replication-gtids-concepts.html&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mysql-ssl-version-ssl-cipher"&gt;
&lt;h2&gt;MySQL Ssl-version, Ssl-cipher&lt;/h2&gt;
&lt;p&gt;不同的 client 在不同 OS 環境下連線 MySQL 會用到不同的 tls_version 和 ssl_cipher，因為 TLSv1 現在有安全性考量，MySQL 5.7.10 之後都建議使用 TLSv1.2 進行 ssl 連線。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mysql&amp;gt; SHOW VARIABLES LIKE 'tls_version';
+---------------+-----------------------+
| Variable_name | Value                 |
+---------------+-----------------------+
| tls_version   | TLSv1,TLSv1.1,TLSv1.2 |
+---------------+-----------------------+
mysql&amp;gt; SHOW VARIABLES LIKE 'ssl_cipher';
+---------------+---------------------------+
| Variable_name | Value                     |
+---------------+---------------------------+
| ssl_cipher    | DHE-RSA-AES128-GCM-SHA256 |
+---------------+---------------------------+
&lt;/pre&gt;
&lt;p&gt;OpenSSL-linked binaries 預設 ssl_cipher：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Variable_name: ssl_cipher_list
        Value: ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE
-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECD
HE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:DHE-RSA-A
ES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:DHE-RSA-AES128-SHA256:DHE-DSS-AES128-
SHA256:DHE-DSS-AES256-GCM-SHA384:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA256:ECD
HE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256
-SHA:DHE-DSS-AES128-SHA:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:
ECDH-ECDSA-AES128-GCM-SHA256:AES256-GCM-SHA384:ECDH-ECDSA-AES256-GCM-SHA384:AES1
28-SHA256:ECDH-ECDSA-AES128-SHA256:AES256-SHA256:ECDH-ECDSA-AES256-SHA384:AES128
-SHA:ECDH-ECDSA-AES128-SHA:AES256-SHA:ECDH-ECDSA-AES256-SHA:DHE-RSA-AES256-GCM-S
HA384:ECDH-RSA-AES128-GCM-SHA256:ECDH-RSA-AES256-GCM-SHA384:ECDH-RSA-AES128-SHA2
56:ECDH-RSA-AES256-SHA384:ECDH-RSA-AES128-SHA:ECDH-RSA-AES256-SHA:DES-CBC3-SHA
&lt;/pre&gt;
&lt;p&gt;refer. &lt;a class="reference external" href="https://dev.mysql.com/doc/refman/5.7/en/encrypted-connection-protocols-ciphers.html"&gt;https://dev.mysql.com/doc/refman/5.7/en/encrypted-connection-protocols-ciphers.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="MySQL"></category></entry><entry><title>2017部落格改版</title><link href="//www.hansliu.com/posts/2017/06/2017-blog-theme-upgrade.html" rel="alternate"></link><published>2017-06-30T22:00:00+08:00</published><updated>2017-06-30T22:00:00+08:00</updated><author><name>Hans Liu</name></author><id>tag:www.hansliu.com,2017-06-30:/posts/2017/06/2017-blog-theme-upgrade.html</id><summary type="html">&lt;p class="first last"&gt;&lt;a class="reference external" href="https://lh3.googleusercontent.com/_0F8Y-MPaYipHJG_YBQalIbe59vmhAAbNxTuDjbuphJsD8k-Ndtlze7-fNuD3CELcDwkH9oMd2YG1lRB7XEg2ueFlmlcFHn-Vs2YCY332L3u0DGWkot_Fg1S5ou_wde76kHsOeDmHxEj3KF26eGbb8kcFPtRyfArb0WZKFrp5Wig_55UglBVEO9590QZxeSHEUzugZOMeNz1vmAvBTbwRqNvEBos9CqrAuFv5pnn86diEfx9BFDx72uUeMsMPLkkecRh4mbuk76ndG3MlYrTdd4iF_pEJINI86OzFZfcIu-H015w_kWbwVGwnfzbul4Jj9jfcgoPhcAFuy0yJWUY709jplU3b3D9W3zGdUHYW1kZRvNdz3gR16BguCAZQQL4Tub-Nd9LyaUQWis9SpvYDNeWC6xoCKYs9NFJYgDSPwMH9VfolVTgbIbhA2HHiTmaXoN9dXA5eoQ2IhTtrpNgGBpfqbP7n7tS9OnpS6-nIb7lCZ5d4EQsT03DnIIriCCr6bJupIG_LRMUfCPLigNDWfaVQTaPXRhpxDs-c-3877ZhYT0iFrv-9zndT6qDuHc7YXYWzFuyvOkXXW7M_RC8vxmElnhy0OwzLJ9NhDOiDvooDdDvQuiVzVr9rr5Y_piSqnbwzOrn0vAN0LCGiBBLtJ87tBi-giIYANHswg2MCK8=w665-h255-no"&gt;&lt;img alt="image0" src="https://lh3.googleusercontent.com/_0F8Y-MPaYipHJG_YBQalIbe59vmhAAbNxTuDjbuphJsD8k-Ndtlze7-fNuD3CELcDwkH9oMd2YG1lRB7XEg2ueFlmlcFHn-Vs2YCY332L3u0DGWkot_Fg1S5ou_wde76kHsOeDmHxEj3KF26eGbb8kcFPtRyfArb0WZKFrp5Wig_55UglBVEO9590QZxeSHEUzugZOMeNz1vmAvBTbwRqNvEBos9CqrAuFv5pnn86diEfx9BFDx72uUeMsMPLkkecRh4mbuk76ndG3MlYrTdd4iF_pEJINI86OzFZfcIu-H015w_kWbwVGwnfzbul4Jj9jfcgoPhcAFuy0yJWUY709jplU3b3D9W3zGdUHYW1kZRvNdz3gR16BguCAZQQL4Tub-Nd9LyaUQWis9SpvYDNeWC6xoCKYs9NFJYgDSPwMH9VfolVTgbIbhA2HHiTmaXoN9dXA5eoQ2IhTtrpNgGBpfqbP7n7tS9OnpS6-nIb7lCZ5d4EQsT03DnIIriCCr6bJupIG_LRMUfCPLigNDWfaVQTaPXRhpxDs-c-3877ZhYT0iFrv-9zndT6qDuHc7YXYWzFuyvOkXXW7M_RC8vxmElnhy0OwzLJ9NhDOiDvooDdDvQuiVzVr9rr5Y_piSqnbwzOrn0vAN0LCGiBBLtJ87tBi-giIYANHswg2MCK8=w665-h255-no" /&gt;&lt;/a&gt; 在參加2017的 PyCon 時，一邊聽台上的講者在分享，一邊在滑著自己的部落格，突然發現自己部落格的畫面有點陽春，就萌生替部落格改版的想法，所以在 PyCon 結束後就重新檢視了自己的部落格，研究一些現有的部落格設計，希望能在保留主要元素的前提下，讓部落格在文章和照片的閱讀上可以更加舒適，並且讓網站的結構可以更加簡潔。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://lh3.googleusercontent.com/_0F8Y-MPaYipHJG_YBQalIbe59vmhAAbNxTuDjbuphJsD8k-Ndtlze7-fNuD3CELcDwkH9oMd2YG1lRB7XEg2ueFlmlcFHn-Vs2YCY332L3u0DGWkot_Fg1S5ou_wde76kHsOeDmHxEj3KF26eGbb8kcFPtRyfArb0WZKFrp5Wig_55UglBVEO9590QZxeSHEUzugZOMeNz1vmAvBTbwRqNvEBos9CqrAuFv5pnn86diEfx9BFDx72uUeMsMPLkkecRh4mbuk76ndG3MlYrTdd4iF_pEJINI86OzFZfcIu-H015w_kWbwVGwnfzbul4Jj9jfcgoPhcAFuy0yJWUY709jplU3b3D9W3zGdUHYW1kZRvNdz3gR16BguCAZQQL4Tub-Nd9LyaUQWis9SpvYDNeWC6xoCKYs9NFJYgDSPwMH9VfolVTgbIbhA2HHiTmaXoN9dXA5eoQ2IhTtrpNgGBpfqbP7n7tS9OnpS6-nIb7lCZ5d4EQsT03DnIIriCCr6bJupIG_LRMUfCPLigNDWfaVQTaPXRhpxDs-c-3877ZhYT0iFrv-9zndT6qDuHc7YXYWzFuyvOkXXW7M_RC8vxmElnhy0OwzLJ9NhDOiDvooDdDvQuiVzVr9rr5Y_piSqnbwzOrn0vAN0LCGiBBLtJ87tBi-giIYANHswg2MCK8=w665-h255-no"&gt;&lt;img alt="image0" src="https://lh3.googleusercontent.com/_0F8Y-MPaYipHJG_YBQalIbe59vmhAAbNxTuDjbuphJsD8k-Ndtlze7-fNuD3CELcDwkH9oMd2YG1lRB7XEg2ueFlmlcFHn-Vs2YCY332L3u0DGWkot_Fg1S5ou_wde76kHsOeDmHxEj3KF26eGbb8kcFPtRyfArb0WZKFrp5Wig_55UglBVEO9590QZxeSHEUzugZOMeNz1vmAvBTbwRqNvEBos9CqrAuFv5pnn86diEfx9BFDx72uUeMsMPLkkecRh4mbuk76ndG3MlYrTdd4iF_pEJINI86OzFZfcIu-H015w_kWbwVGwnfzbul4Jj9jfcgoPhcAFuy0yJWUY709jplU3b3D9W3zGdUHYW1kZRvNdz3gR16BguCAZQQL4Tub-Nd9LyaUQWis9SpvYDNeWC6xoCKYs9NFJYgDSPwMH9VfolVTgbIbhA2HHiTmaXoN9dXA5eoQ2IhTtrpNgGBpfqbP7n7tS9OnpS6-nIb7lCZ5d4EQsT03DnIIriCCr6bJupIG_LRMUfCPLigNDWfaVQTaPXRhpxDs-c-3877ZhYT0iFrv-9zndT6qDuHc7YXYWzFuyvOkXXW7M_RC8vxmElnhy0OwzLJ9NhDOiDvooDdDvQuiVzVr9rr5Y_piSqnbwzOrn0vAN0LCGiBBLtJ87tBi-giIYANHswg2MCK8=w665-h255-no" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在參加2017的 PyCon 時，一邊聽台上的講者在分享，一邊在滑著自己的部落格，突然發現自己部落格的畫面有點陽春，就萌生替部落格改版的想法，所以在 PyCon 結束後就重新檢視了自己的部落格，研究一些現有的部落格設計，希望能在保留主要元素的前提下，讓部落格在文章和照片的閱讀上可以更加舒適，並且讓網站的結構可以更加簡潔。&lt;/p&gt;
&lt;p&gt;這次改版前前後後花的時間有兩週多，比原本預想的時間還要多了一點，因為久久才改一次，一堆設計都忘光光，不過從成果來看自己還蠻滿意的，希望能帶來更好的瀏覽體驗。&lt;/p&gt;
&lt;p&gt;主要的更新如下：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;更完善的 css3 設計，同時移除對 bootstrap 的依賴&lt;/li&gt;
&lt;li&gt;修正 categories 和 tags 網頁打不開的問題&lt;/li&gt;
&lt;li&gt;調整 header 和 sidebar 的結構，強化 RWD 的支援&lt;/li&gt;
&lt;li&gt;加入新版的 sharethis 功能&lt;/li&gt;
&lt;li&gt;python 升級到 3.5，同時 pelican 升級到 3.7.1&lt;/li&gt;
&lt;li&gt;加入 pipeline pelican publish 的功能，這樣更新文章可以做到自動部屬&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最後替新舊網站的設計留個截圖，為這次改版做個記錄。&lt;/p&gt;
&lt;p&gt;# 舊網站設計的截圖&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://lh3.googleusercontent.com/5nXJbUnIEYkbVVHXBFT2zzaEl3aeoyTukYy2T8LO9J9VuFIDYicdEnaRRpQc1ivQn0851clqeBN-w6jLSLzmrjoYBtUYihv5RNhlCB5ppSU74tHtfTproDlKHb6GTopLi8gRkSJW5yUdglikQh9Bx4uX8_6AVHAVet74-8pq2WnT9EUbYfFI1JH5vD8xl_l89sav5pZU-5vmpBRnADwpz5zvwN4iB6w0X0BlJ5lWGOTZHbNjqqgWB3HkUdLkebpQo1PXajAL4wpw9wvLQ6TfmyFEHdV23iQEkGQP7OPCJr5MPwn5UgBG79g88zZcLIXnDu0JMLI691etPCz7JqT2X8zvFIFul-uLZbfn59xOf8rqnFCHLELZHRLcbO8DlM95da9egcDzMYdZgAQA8jXuQbpmQYEdaGyypiV4mam6Rhjm5S_HMgMzMLNrwgUoYEail7u4Kly999rRIqms78aASGzKQQmXgr5NeZ9-2KJkp1OCg7PHIaGGn5U9yq725xNvMyHEiLRzSWj0gkgvH3pWEhT4BwYUdfJ0YyK2ccPveXAdFSMDzD6czw5WVY_hB640pl65U8ClrZu3TICpP3oJZzmi6mcML0YUAg1v0hRiX3ftZXFR7OujDG0XHLMHCnOxwYCkjcfpclF8q-7KLg-oBUU8BjaOSx0bhePXDq9b6zM=w1200-h708-no"&gt;&lt;img alt="image1" src="https://lh3.googleusercontent.com/5nXJbUnIEYkbVVHXBFT2zzaEl3aeoyTukYy2T8LO9J9VuFIDYicdEnaRRpQc1ivQn0851clqeBN-w6jLSLzmrjoYBtUYihv5RNhlCB5ppSU74tHtfTproDlKHb6GTopLi8gRkSJW5yUdglikQh9Bx4uX8_6AVHAVet74-8pq2WnT9EUbYfFI1JH5vD8xl_l89sav5pZU-5vmpBRnADwpz5zvwN4iB6w0X0BlJ5lWGOTZHbNjqqgWB3HkUdLkebpQo1PXajAL4wpw9wvLQ6TfmyFEHdV23iQEkGQP7OPCJr5MPwn5UgBG79g88zZcLIXnDu0JMLI691etPCz7JqT2X8zvFIFul-uLZbfn59xOf8rqnFCHLELZHRLcbO8DlM95da9egcDzMYdZgAQA8jXuQbpmQYEdaGyypiV4mam6Rhjm5S_HMgMzMLNrwgUoYEail7u4Kly999rRIqms78aASGzKQQmXgr5NeZ9-2KJkp1OCg7PHIaGGn5U9yq725xNvMyHEiLRzSWj0gkgvH3pWEhT4BwYUdfJ0YyK2ccPveXAdFSMDzD6czw5WVY_hB640pl65U8ClrZu3TICpP3oJZzmi6mcML0YUAg1v0hRiX3ftZXFR7OujDG0XHLMHCnOxwYCkjcfpclF8q-7KLg-oBUU8BjaOSx0bhePXDq9b6zM=w1200-h708-no" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;# 新網站設計的截圖&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://lh3.googleusercontent.com/cAhvW7g7L_nwURLDH4JlClgNSlp4B8K8JBZXVAx5d_OJTumm2YwE-ugr8zmKLAvkDqZ6TWvAn5rFIGEyA7n2KQWYJH4Ci0OmYMlWjFBWmAeY7Z5u5dHPPqwaUfBHiMq02G-PPjThrbPmaX_0SXlo-lZlBFX99oWd2xiq-7WK6AF0-SLDghXLR_bJOb5C1SjLqJ9HTA2A3unIY9MsIyWS_XewdTAEC4zwpohyCc7prNLZqYDyO468pgrTIlruuQHbUiYmMvTT2i_HAZAN47lkbKBT-DPkPos7aMqJK3NG2BIFqm_vPXOpK6QNXKwbd7n3DJWaLqgtlUKA2Ow_sUuwzqyHf_iya6BTLQUUYlsne7RGdQ22O1udpEnF05H6xzon_aQFGo2PCVjO7kG7jNU_H8UieRge8BR8kEVr4fW2btV6pV9WHehfnn0R5EQ8h-NAqSy_8j1zlnSiDkI7s_sWwwMgfZ7zXvPlHgMlumEjiA3eZGf1Ycavd3G5pavP7xSc2NyYsxoKGH_jqsZYeEo1pX4vyeZ4PFHPwDOgV35qpK6_UuQOCXmHIXrDIqrkZQvlTTrr4MoFkUu9nssSm_cWD6Vz2Wemu5b_0e-TeXR4KbsovdhokEV2NQ6vms8vUpRtRJKVLVYv9394cC-w_xTVhnUNnWy51U2Zd40u9BJ7Tso=w1200-h663-no"&gt;&lt;img alt="image2" src="https://lh3.googleusercontent.com/cAhvW7g7L_nwURLDH4JlClgNSlp4B8K8JBZXVAx5d_OJTumm2YwE-ugr8zmKLAvkDqZ6TWvAn5rFIGEyA7n2KQWYJH4Ci0OmYMlWjFBWmAeY7Z5u5dHPPqwaUfBHiMq02G-PPjThrbPmaX_0SXlo-lZlBFX99oWd2xiq-7WK6AF0-SLDghXLR_bJOb5C1SjLqJ9HTA2A3unIY9MsIyWS_XewdTAEC4zwpohyCc7prNLZqYDyO468pgrTIlruuQHbUiYmMvTT2i_HAZAN47lkbKBT-DPkPos7aMqJK3NG2BIFqm_vPXOpK6QNXKwbd7n3DJWaLqgtlUKA2Ow_sUuwzqyHf_iya6BTLQUUYlsne7RGdQ22O1udpEnF05H6xzon_aQFGo2PCVjO7kG7jNU_H8UieRge8BR8kEVr4fW2btV6pV9WHehfnn0R5EQ8h-NAqSy_8j1zlnSiDkI7s_sWwwMgfZ7zXvPlHgMlumEjiA3eZGf1Ycavd3G5pavP7xSc2NyYsxoKGH_jqsZYeEo1pX4vyeZ4PFHPwDOgV35qpK6_UuQOCXmHIXrDIqrkZQvlTTrr4MoFkUu9nssSm_cWD6Vz2Wemu5b_0e-TeXR4KbsovdhokEV2NQ6vms8vUpRtRJKVLVYv9394cC-w_xTVhnUNnWy51U2Zd40u9BJ7Tso=w1200-h663-no" /&gt;&lt;/a&gt;&lt;/p&gt;
</content><category term="Blog"></category></entry><entry><title>Taiwan eTraining Course Finder in Heroku</title><link href="//www.hansliu.com/posts/2015/07/github-etraining-course-finder-heroku.html" rel="alternate"></link><published>2015-07-07T23:00:00+08:00</published><updated>2015-07-07T23:00:00+08:00</updated><author><name>Hans Liu</name></author><id>tag:www.hansliu.com,2015-07-07:/posts/2015/07/github-etraining-course-finder-heroku.html</id><summary type="html">&lt;p&gt;因為勞動部勞動力發展署網站實在太難用，所以自己開發一個好用的網站，然後部屬到 Heroku 上面。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://hansliu-finder.herokuapp.com"&gt;Taiwan eTraining Course Finder 網站&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;實作上採用的是 Python3 搭配 Flask 架構。&lt;/p&gt;
&lt;p&gt;在課程資料來源的部份，使用 Selenium 收集勞動部勞動力發展署網站公開的課程資料（目前收集的課程範圍只有臺北市和新北市 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;因為勞動部勞動力發展署網站實在太難用，所以自己開發一個好用的網站，然後部屬到 Heroku 上面。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://hansliu-finder.herokuapp.com"&gt;Taiwan eTraining Course Finder 網站&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;實作上採用的是 Python3 搭配 Flask 架構。&lt;/p&gt;
&lt;p&gt;在課程資料來源的部份，使用 Selenium 收集勞動部勞動力發展署網站公開的課程資料（目前收集的課程範圍只有臺北市和新北市），然後將課程資料建置索引之後儲存於 Sqlite3 的資料庫中，最後設定 cronjob 定期更新資料庫。&lt;/p&gt;
&lt;p&gt;目前的功能：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;直覺式的課程尋找. (暫時限定: 臺北市, 新北市)&lt;/li&gt;
&lt;li&gt;顯示課程資訊、課程的報名時間與開訓時間。&lt;/li&gt;
&lt;li&gt;顯示課程代碼，可以連結到相關課程的詳細介紹頁面。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;建置課程資料庫&lt;/h2&gt;
&lt;p&gt;只要直接執行 model.py 就會完成收集課程資料和建立資料庫等動作。&lt;/p&gt;
&lt;p&gt;簡單的 use case:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# build up db
cd etraining-course-finder-heroku/
python3.* ./etraining_course_finder/model.py

# update db to github
git pull ; git add -u ; git commit -m'updated db' ; git push
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="heroku"&gt;
&lt;h2&gt;部屬到 Heroku&lt;/h2&gt;
&lt;p&gt;很久以前就摸索過 Heroku 這個 PaaS 網站，當時就覺得 Heroku 很簡單好用，不論在安裝和部屬上都算是相當容易，有 github 的專案都可以直接 deployment，不過當你有使用到 Heroku 內建 plugin 的時候，就必須先透過信用卡卡號認證，即使你只是要用免費的 plugin，這算是稍嫌麻煩一點的地方。&lt;/p&gt;
&lt;p&gt;同時，因為 Heroku 無法安裝 browser，就無法直接執行 Selenium，所以目前定期更新資料庫的 cronjob 是跑在本機端上面。&lt;/p&gt;
&lt;p&gt;詳細使用教學可以參照 Github repository 的說明。&lt;/p&gt;
&lt;p&gt;Github repository link: &lt;a class="reference external" href="https://github.com/hansliu/etraining-course-finder-heroku"&gt;https://github.com/hansliu/etraining-course-finder-heroku&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="Github"></category><category term="Heroku"></category></entry><entry><title>2015 PyCon</title><link href="//www.hansliu.com/posts/2015/06/2015-pycon.html" rel="alternate"></link><published>2015-06-08T23:00:00+08:00</published><updated>2015-06-08T23:00:00+08:00</updated><author><name>Hans Liu</name></author><id>tag:www.hansliu.com,2015-06-08:/posts/2015/06/2015-pycon.html</id><summary type="html">&lt;p class="first last"&gt;&lt;a class="reference external" href="https://lh3.googleusercontent.com/-PWwg2yshhX4/VXb248gk16I/AAAAAAAAOmQ/C6HT4hX1o4w/s1600/IMG_0183.JPG"&gt;&lt;img alt="image0" src="https://lh3.googleusercontent.com/-PWwg2yshhX4/VXb248gk16I/AAAAAAAAOmQ/C6HT4hX1o4w/s800/IMG_0183.JPG" /&gt;&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;div class="img-center"&gt;&lt;p&gt;&lt;a class="reference external" href="https://lh3.googleusercontent.com/-PWwg2yshhX4/VXb248gk16I/AAAAAAAAOmQ/C6HT4hX1o4w/s1600/IMG_0183.JPG"&gt;&lt;img alt="image0" src="https://lh3.googleusercontent.com/-PWwg2yshhX4/VXb248gk16I/AAAAAAAAOmQ/C6HT4hX1o4w/s800/IMG_0183.JPG" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;今年 PyCon APAC 是在台灣舉辦，活動的規模也擴增到了三天，感謝 Rick 的協助，讓我順利用早鳥票報名 PyCon APAC 啦！&lt;/p&gt;
&lt;p&gt;這次聽到有趣的 library 和 framework 比較少，大多在於如何利用 Python 去實踐一些想法，或是利用在不同領域的研究，其中有不少贊助廠商的分享也還不錯。&lt;/p&gt;
&lt;p&gt;三天的演講內容摘要可以參考 hackpad 的共筆。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hackpad.com/PyCon-APAC-2015-Day-1-June-5-Tt8wwkILDX0"&gt;https://hackpad.com/PyCon-APAC-2015-Day-1-June-5-Tt8wwkILDX0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後還是要記錄一下今年活動覺得有趣或有用的 library。&lt;/p&gt;
&lt;div class="section" id="hackpad"&gt;
&lt;h2&gt;hackpad&lt;/h2&gt;
&lt;p&gt;目前當紅的共筆服務，不論在操作和反應上都比 google doc 來的更加即時好用，相當推薦。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="readthedocs"&gt;
&lt;h2&gt;readthedocs&lt;/h2&gt;
&lt;p&gt;也是目前當紅的文件托管服務，已經有相當多的 open source 將它們的文件轉移到 readthedocs。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://readthedocs.org/"&gt;https://readthedocs.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="urllib2-pycurl-selenium"&gt;
&lt;h2&gt;urllib2 &amp;amp; pycurl &amp;amp; selenium&lt;/h2&gt;
&lt;p&gt;分析網頁的三套工具，分別是 python 內建的 urllib2 library，或是模擬 linux curl 功能的 pycurl library，以及用來模擬瀏覽器動作的 selenium library，透過這三套工具來分析網頁，應該能解決絕大多數的問題。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gevent"&gt;
&lt;h2&gt;gevent&lt;/h2&gt;
&lt;p&gt;隨著時代的進步，撰寫同步與非同步服務的建議不再是使用 twisted，而多半建議採用的是 gevent，這是更加輕量好用的網路協作 library，而且在程式設計上提供更容易理解的架構與方法。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.gevent.org/"&gt;http://www.gevent.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://xlambda.com/gevent-tutorial/"&gt;http://xlambda.com/gevent-tutorial/&lt;/a&gt; 中譯&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="celery-luigi"&gt;
&lt;h2&gt;celery &amp;amp; luigi&lt;/h2&gt;
&lt;p&gt;這兩套 library 都是用來做 task manager 的，可惜的是不論是聽講者講的內容，或是我自己當下看了文件，都還是不太能理解這些套件的用途，只好先記錄下來，待以後有機會用到再仔細學習。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.celeryproject.org/"&gt;http://www.celeryproject.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://luigi.readthedocs.org/"&gt;http://luigi.readthedocs.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="pytest"&gt;
&lt;h2&gt;pytest&lt;/h2&gt;
&lt;p&gt;除了 python 內建的 unittest 之外，強大的 pytest 不但可以減少測試程式的複雜度，還可以強化測試結果的輸出。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pytest.org/"&gt;http://pytest.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ansible"&gt;
&lt;h2&gt;ansible&lt;/h2&gt;
&lt;p&gt;簡單說就是一套以 python 撰寫的 deployment 工具，最大特色是採用 ssh 做溝通，所以不用安裝 client tool， ansible 也是採用 roles/playbook/config 的架構做管理。&lt;/p&gt;
&lt;p&gt;因為我沒親身使用過，所以無法評論與最多人用的 Puppet 或是 Chef 和 Salt 之間的優劣與差異，但是據我所知，每一套 deployment 工具都有它設計上的特色，建議是根據實際需求來做挑選。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ansible.com/"&gt;http://www.ansible.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="type-hints"&gt;
&lt;h2&gt;type hints&lt;/h2&gt;
&lt;p&gt;Python 在變數宣告上採用的是 dynamic typing，也就是在宣告變數的時候並不需要指定其型態，而是當程式執行它的時候，才會去檢查其變數的形態與邏輯。&lt;/p&gt;
&lt;p&gt;不過，雖然 Python 採用 dynamic typing，它同時也是強型別的，所以 Python 仍然禁止任何沒有明確定義的操作，比如數字加字串。而 dynamic typing 雖然替程式開發者帶來了更大的彈性，但缺點就是產生較差的效能，因為所有的檢查都會在執行的時候才做處理。&lt;/p&gt;
&lt;p&gt;此次 keynote 透過分享 PEP 0484 Type Hints 這個章節，讓程式開發者可以透過 typing 這個 module 來預先替變數指定型態，增加 Python 在執行上的效能。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0484/"&gt;https://www.python.org/dev/peps/pep-0484/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Python"></category></entry><entry><title>為什麼 MVC 實作不一樣</title><link href="//www.hansliu.com/posts/2015/03/why-do-not-mvc-pattern-look-like.html" rel="alternate"></link><published>2015-03-01T06:00:00+08:00</published><updated>2015-03-01T06:00:00+08:00</updated><author><name>Hans Liu</name></author><id>tag:www.hansliu.com,2015-03-01:/posts/2015/03/why-do-not-mvc-pattern-look-like.html</id><summary type="html">&lt;p&gt;這篇文章最早是用來回應 Python 社群對於 MVC 的討論內容，同時把它記錄在自己的部落格上。&lt;/p&gt;
&lt;p&gt;其原文探討的是為什麼每套 Framework 對於 MVC 設計上都有一套自己的見解，即使設計和實作上不一樣，卻都說自家的 Framework 包含（支援） MVC。&lt;/p&gt;
&lt;p&gt;在討論這個問題之前，我們首先要認識一下 MVC …&lt;/p&gt;</summary><content type="html">&lt;p&gt;這篇文章最早是用來回應 Python 社群對於 MVC 的討論內容，同時把它記錄在自己的部落格上。&lt;/p&gt;
&lt;p&gt;其原文探討的是為什麼每套 Framework 對於 MVC 設計上都有一套自己的見解，即使設計和實作上不一樣，卻都說自家的 Framework 包含（支援） MVC。&lt;/p&gt;
&lt;p&gt;在討論這個問題之前，我們首先要認識一下 MVC 的由來，至於有關 MVC 設計的細節將不是本篇的重點，對細節有興趣的人可以從我文內分享的文章或是從書本中得到更完整的說明。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;什麼是 MVC&lt;/h2&gt;
&lt;p style="font-size: 10px;"&gt;&lt;a href="http://commons.wikimedia.org/wiki/File:MVC-Process.svg#mediaviewer/File:MVC-Process.svg"&gt;&lt;img alt="MVC-Process.svg" src="http://upload.wikimedia.org/wikipedia/commons/a/a0/MVC-Process.svg" height="290" width="264"&gt;&lt;/a&gt;&lt;br&gt;圖片 "&lt;a href="http://commons.wikimedia.org/wiki/File:MVC-Process.svg#mediaviewer/File:MVC-Process.svg"&gt;MVC-Process&lt;/a&gt;" 由 &lt;a href="//commons.wikimedia.org/wiki/User:RegisFrey" title="User:RegisFrey"&gt;RegisFrey&lt;/a&gt; - &lt;span class="int-own-work"&gt;自己的作品&lt;/span&gt;。 使用來自 &lt;a href="//commons.wikimedia.org/wiki/"&gt;维基共享資源&lt;/a&gt; 的 公共領域 條款授權。&lt;/p&gt;&lt;p&gt;MVC 最早是 smalltalk 設計的一個 Pattern，其&lt;strong&gt;定義&lt;/strong&gt;與&lt;strong&gt;目的&lt;/strong&gt;與&lt;strong&gt;模擬實作&lt;/strong&gt;的方法在 Design Pattern 一書中都描述的相當清楚，有興趣可以去書店翻一下。&lt;/p&gt;
&lt;p&gt;網路上可以參照： &lt;a class="reference external" href="http://www.tutorialspoint.com/design_pattern/mvc_pattern.htm"&gt;http://www.tutorialspoint.com/design_pattern/mvc_pattern.htm&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;目的與 MVC&lt;/h2&gt;
&lt;p&gt;這邊要著重的點在於，Design Pattern 書中不是要強迫你實作的內容百分百一樣，而是要求你的實作要達到 Pattern 目的，我在這邊列出中文書上對於其目的的說明：&lt;/p&gt;
&lt;p&gt;MVC 的目的在於&lt;strong&gt;增加彈性&lt;/strong&gt;與&lt;strong&gt;再利用性&lt;/strong&gt;，同一個 model 可以搭配好幾個 view，也可以做出不會改變 model 內容的 view，同時更嚴苛的要求，view 不應該包含運算的邏輯。&lt;/p&gt;
&lt;p&gt;因此不是去追究每套 Framework 在設計上的差異去與定義比較，然後要說它的設計到底要不要叫做 MVC，而是要去看設計之後是否能達到 MVC 目的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mvc-architecture-pattern"&gt;
&lt;h2&gt;MVC 是 Architecture Pattern&lt;/h2&gt;
&lt;p&gt;後來有人在社群裡提到 Architecture Pattern 之後，我才想到 MVC 是在 Design Pattern 一書中開頭章節就列出來的，並沒有包含在後續主要章節所描述的23個 Design Pattern 之中，其介紹上也顯示 MVC 更像是一個 Architecture Pattern。&lt;/p&gt;
&lt;p&gt;那 Design Pattern 和所謂的 Architecture Pattern 又有什麼不同呢？&lt;/p&gt;
&lt;p&gt;根據 Stackoverflow 所描述的回答，我覺得兩種 Pattern 還是從&lt;strong&gt;目的&lt;/strong&gt;和&lt;strong&gt;實作&lt;/strong&gt;兩個層面來看最容易區分。&lt;/p&gt;
&lt;p&gt;Stackoverflow 的回答可以參照： &lt;a class="reference external" href="http://stackoverflow.com/questions/1866821/is-mvc-a-design-pattern-or-architectural-pattern"&gt;http://stackoverflow.com/questions/1866821/is-mvc-a-design-pattern-or-architectural-pattern&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;節錄其中 vrluckyin 的回答，針對目的和實作上的差別都有很清楚的描述：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Design patterns say how to write code effectively.

A few benefits:

  - Easily Maintainable
  - High Re-usability
  - Readable because of abstractions

Architectural patterns say how to utilize resources effectively.

  - Parallel tasks execution like programmers and graphic designers can work parallel.
  - Multiple technologies can be utilized to build a software.

In MVC, a). Views can be created using javascript templates and also html can be used b). Controllers can be written .NET framework and c). Models can be written in Java - a java service may be used that returns only json data.

While in design pattern, a pattern can't be implemented in which code can be written in multiple technologies like AdminUser class in Java, Customer class in C#, Partners class in Php and a factory pattern in Ruby :); hmmm..so easy?:)
&lt;/pre&gt;
&lt;p&gt;除了目的就不同， Design Pattern 在實作上會存在需要使用同一種技術語言完成的先天條件，而 Architectural Pattern 則沒有這樣的限制，所以每套 Framework 只要實作出來的結果符合 MVC Pattern 的目的，並且保證使用者擁有 MVC Pattern 的優點，就算實作的方式不盡相同，也代表其包含（支援） MVC。&lt;/p&gt;
&lt;/div&gt;
</content><category term="MVC"></category><category term="Design Pattern"></category></entry><entry><title>轉換 Bootstrap 從 v2 到 v3</title><link href="//www.hansliu.com/posts/2014/11/migrating-bootstrap-v2-to-v3.html" rel="alternate"></link><published>2014-11-19T22:00:00+08:00</published><updated>2014-11-19T22:00:00+08:00</updated><author><name>Hans Liu</name></author><id>tag:www.hansliu.com,2014-11-19:/posts/2014/11/migrating-bootstrap-v2-to-v3.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;在 &lt;a class="reference external" href="//www.hansliu.com/posts/2014/03/hello-pelican-github-pages.html"&gt;Hello Pelican + GitHub Pages&lt;/a&gt; 介紹部落格的時候有提到，現在使用的 Pelican 樣式是 Jenny 設計的 &lt;a class="reference external" href="https://github.com/jsliang/pelican-fresh"&gt;pelican-fresh&lt;/a&gt; ，其設計是架構在 Bootstrap v2.x 的版本之上。因為我想要重新設計選單的樣式，使其可以支援使用行動裝置瀏覽的時候 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;在 &lt;a class="reference external" href="//www.hansliu.com/posts/2014/03/hello-pelican-github-pages.html"&gt;Hello Pelican + GitHub Pages&lt;/a&gt; 介紹部落格的時候有提到，現在使用的 Pelican 樣式是 Jenny 設計的 &lt;a class="reference external" href="https://github.com/jsliang/pelican-fresh"&gt;pelican-fresh&lt;/a&gt; ，其設計是架構在 Bootstrap v2.x 的版本之上。因為我想要重新設計選單的樣式，使其可以支援使用行動裝置瀏覽的時候，選單會自動轉換成較好操作，而且又不會佔用閱讀空間的設計樣式，剛好我發現 Bootstrap v3.x 內建就有這樣的樣式風格，就決定把部落格使用的 Bootstrap 從 v2 轉換到 v3。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;轉換&lt;/h2&gt;
&lt;p&gt;轉換的部份其實蠻簡單的，主要可以參考官方的轉換文件，將 v2 對應的 class 改變成 v3 的版本，並針對部分 default 的 CSS 做微調即可。而且 Bootstrap v3 內建的設計風格因應業界趨勢，朝向扁平化發展，搭配許多新的 Glyphicons，可以很快速的完成一個簡單的樣式，看起來還不錯。&lt;/p&gt;
&lt;p&gt;官方轉換文件 - &lt;a class="reference external" href="http://getbootstrap.com/migration/"&gt;http://getbootstrap.com/migration/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不過要注意的是，在跨瀏覽器方面，Bootstrap v3 不支援 IE7 和 Firefox 3.6，有跨瀏覽器需求的人要注意一下是否要使用 Bootstrap v3。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;選單&lt;/h2&gt;
&lt;p&gt;使用 Bootstrap v3 重新設計選單的樣式，我是直接參考 twitter bootstrap tutorial 有關設計選單的教學。&lt;/p&gt;
&lt;p&gt;Creating a Simple Navbar with Twitter Bootstrap - &lt;a class="reference external" href="http://www.tutorialrepublic.com/twitter-bootstrap-tutorial/bootstrap-navbar.php"&gt;http://www.tutorialrepublic.com/twitter-bootstrap-tutorial/bootstrap-navbar.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;照著做就可以有支援行動裝置的選單樣式了。&lt;/p&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="Bootstrap"></category></entry><entry><title>使用 Process Count Supervisor + Cronjob 管理背景行程數</title><link href="//www.hansliu.com/posts/2014/11/github-process-count-supervisor.html" rel="alternate"></link><published>2014-11-02T17:00:00+08:00</published><updated>2014-11-02T17:00:00+08:00</updated><author><name>Hans Liu</name></author><id>tag:www.hansliu.com,2014-11-02:/posts/2014/11/github-process-count-supervisor.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;Cronjob 很頻繁的被使用在工作排程上，不過如果無法預期排程中的 process 的執行時間，當發生 process 的執行時間超過排程預期的時候，可能會重複執行多個重複的 process，如此不但會造成系統資源的浪費，也可能發生無法預期的錯誤。&lt;/p&gt;
&lt;p&gt;為了要友善管理背景執行的 process，在網路上可以找到用 Python 撰寫的 &lt;a class="reference external" href="http://supervisord.org/index.html"&gt;Supervisor: A …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;Cronjob 很頻繁的被使用在工作排程上，不過如果無法預期排程中的 process 的執行時間，當發生 process 的執行時間超過排程預期的時候，可能會重複執行多個重複的 process，如此不但會造成系統資源的浪費，也可能發生無法預期的錯誤。&lt;/p&gt;
&lt;p&gt;為了要友善管理背景執行的 process，在網路上可以找到用 Python 撰寫的 &lt;a class="reference external" href="http://supervisord.org/index.html"&gt;Supervisor: A Process Control System&lt;/a&gt; ，Supervisor 是一套完整的 system process monitoring 工具。但是這套工具的設計是以一支 daemon process 去管理 process，並透過設定檔來操作管理 process 的細節，雖然提供很多強大的附加功能，但主要是為了維持服務的穩定，這和我想要減少使用系統資源的目標有點不同。&lt;/p&gt;
&lt;p&gt;而且這樣的工具會有一個明顯的盲點，因為 Supervisor 是利用 daemon process 去管理 process，那是不是也需要有 process 來管理 Supervisor 的 daemon process？所以最後我沒有採用 Supervisor 這套工具，而選擇自己寫一支簡單的程式。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="process-count-supervisor"&gt;
&lt;h2&gt;Process Count Supervisor&lt;/h2&gt;
&lt;p&gt;前言說完了，回到我要解決的問題，放在要如何簡單管理 process 數目，並且盡可能減少額外要執行的 process，以此概念下完成了 Process Count Supervisor 這支程式。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;每次執行時才帶入需要的 process 指令，不需要保持常駐的 daemon&lt;/li&gt;
&lt;li&gt;簡單透過參數限制最多執行的 process 數目&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="simple-use-case"&gt;
&lt;h2&gt;Simple Use Case&lt;/h2&gt;
&lt;p&gt;新建一個睡眠時間超過一分鐘的 shell script sleep.sh:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
echo '#!/bin/bash' &amp;gt; /home/yourname/sleep.sh
echo 'sleep 200' &amp;gt; /home/yourname/sleep.sh
chmod +x /home/yourname/sleep.sh
&lt;/pre&gt;
&lt;p&gt;設定 cronjob 為每分鐘執行一次，並使用 pcs.py （Process Count Supervisor） 來管理 sleep.sh:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
crontab -e
*/1 * * * * /home/yourname/pcs.py -m 1 /home/yourname/sleep.sh &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
&lt;/pre&gt;
&lt;p&gt;因為每分鐘執行一次的 sleep.sh 會睡眠超過一分鐘，所以理論上兩分鐘會擁有兩支 sleep.sh 同時在背景執行，但是在 pcs.py 的管理之下，sleep.sh 會維持同時間只有一支在背景執行。&lt;/p&gt;
&lt;p&gt;詳細使用教學可以參照 Github repository 的說明。&lt;/p&gt;
&lt;p&gt;Github repository link: &lt;a class="reference external" href="https://github.com/hansliu/process-count-supervisor"&gt;https://github.com/hansliu/process-count-supervisor&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="Github"></category></entry><entry><title>2014 PyCon</title><link href="//www.hansliu.com/posts/2014/06/2014-pycon.html" rel="alternate"></link><published>2014-06-02T23:00:00+08:00</published><updated>2014-06-02T23:00:00+08:00</updated><author><name>Hans Liu</name></author><id>tag:www.hansliu.com,2014-06-02:/posts/2014/06/2014-pycon.html</id><summary type="html">&lt;p class="first last"&gt;&lt;a class="reference external" href="https://lh5.googleusercontent.com/-LR8HJ1SVLUU/U4yvHeLDgsI/AAAAAAAAKUA/h-7gWlvf7Z0/s1600/pycon2014.jpg"&gt;&lt;img alt="image0" src="https://lh5.googleusercontent.com/-LR8HJ1SVLUU/U4yvHeLDgsI/AAAAAAAAKUA/h-7gWlvf7Z0/s800/pycon2014.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;div class="img-center"&gt;&lt;p&gt;&lt;a class="reference external" href="https://lh5.googleusercontent.com/-LR8HJ1SVLUU/U4yvHeLDgsI/AAAAAAAAKUA/h-7gWlvf7Z0/s1600/pycon2014.jpg"&gt;&lt;img alt="image0" src="https://lh5.googleusercontent.com/-LR8HJ1SVLUU/U4yvHeLDgsI/AAAAAAAAKUA/h-7gWlvf7Z0/s800/pycon2014.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;今年當然也參加 PyCon 啦！&lt;/p&gt;
&lt;p&gt;趁記憶猶新的時候，把這次聽到有趣的 library 和 framework 記錄下來。前面三項的內容摘錄自 &lt;a class="reference external" href="http://www.codedata.com.tw/social-coding/python-conference-newbie-ccr/"&gt;codedata&lt;/a&gt; 。&lt;/p&gt;
&lt;div class="section" id="fabric"&gt;
&lt;h2&gt;fabric&lt;/h2&gt;
&lt;p&gt;當你一次管很多台電腦的時候，常常想要一鍵讓你所有機器執行數個 command。例如想要一次看所有機器的時間是否同步，看看所有電腦上的剩餘空間，或是一鍵 deploy，一鍵 rsync 等等...這個工具讓你輕鬆寫些 python script 就可以達到此目的。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.fabfile.org/"&gt;http://www.fabfile.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="docker"&gt;
&lt;h2&gt;docker&lt;/h2&gt;
&lt;p&gt;這個應該不是 Python 限定的，但是因為有場專門介紹覺得很有興趣。現在大家已經對 VM 很熟悉了，但是 Docker 算是 lightweight 的 VM，他們有 host/guest 兩層 OS，而是在 host 之上有個 docker 層，可以 load 各種 distribution 到你的機器之上。所以你很容易開一個乾淨的環境，並且把你想要的檔案透過 API 放進此 sandbox，透過 expose 你想要的 port，這樣就可以跑起一個乾淨的環境。這對於測試，或是 staging 都非常有幫助。另外他有版本控制的功能，也有各種 distribution 的 ecosystem，成熟了以後應該會是個趨勢。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.docker.io/"&gt;https://www.docker.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="thumbor"&gt;
&lt;h2&gt;thumbor&lt;/h2&gt;
&lt;p&gt;其實這是個小但是很可能會用到的工具。我們網頁常常需要切圖，但是不知道要切多大。而 thumbor 是個 gateway，只要描述:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
http://&amp;lt;thumbor-server&amp;gt;/300×200/smart/{your-host-of-image}/{your-path-to-image}
&lt;/pre&gt;
&lt;p&gt;它就會動態的產生 thumbnail，此工具搭配 CDN 可以解決很多的問題。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/thumbor/thumbor"&gt;https://github.com/thumbor/thumbor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="jieba"&gt;
&lt;h2&gt;jieba&lt;/h2&gt;
&lt;p&gt;中文分詞一直是讓人頭痛的問題，自從雅虎斷章取義工具 sunset 之後，現在主流的分詞工具之一是中研院的中文斷詞系統，但是我自己覺得沒有很好用。現在則有了新的選擇，就是結巴分詞。結巴的目標是打造最好用的 Python 分詞工具，對於需要中文分詞的 Python 使用者來說無疑是一大福音。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/fxsjy/jieba"&gt;https://github.com/fxsjy/jieba&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="mezzanine"&gt;
&lt;h2&gt;mezzanine&lt;/h2&gt;
&lt;p&gt;基於 Django 之上完成的強大的內容管理工具，keynote speaker 有用 wordpress 當做比較的對象，架設內容網站的選擇之一。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/stephenmcd/mezzanine"&gt;https://github.com/stephenmcd/mezzanine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="networkx"&gt;
&lt;h2&gt;networkx&lt;/h2&gt;
&lt;p&gt;一個描繪點與線結構用的繪圖工具，如果有需要把複雜的網路架構圖像化的可以參考。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://networkx.github.io/"&gt;https://networkx.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Python"></category></entry><entry><title>使用 Name Expansion + Fabric 同時部屬多台機器</title><link href="//www.hansliu.com/posts/2014/04/github-name-expansion.html" rel="alternate"></link><published>2014-04-26T23:00:00+08:00</published><updated>2014-04-26T23:00:00+08:00</updated><author><name>Hans Liu</name></author><id>tag:www.hansliu.com,2014-04-26:/posts/2014/04/github-name-expansion.html</id><summary type="html">&lt;p&gt;前陣子為了完成 Fabric 同時部屬多台機器的功能，寫了一個字串展開的小工具。&lt;/p&gt;
&lt;p&gt;使用 python regular expression 來實作，讓使用者可以利用逗號、數字、括弧將字串批次展開。&lt;/p&gt;
&lt;p&gt;簡單的 use case:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from name_expansion import NameExpansionCore
&amp;gt;&amp;gt;&amp;gt; ne …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;前陣子為了完成 Fabric 同時部屬多台機器的功能，寫了一個字串展開的小工具。&lt;/p&gt;
&lt;p&gt;使用 python regular expression 來實作，讓使用者可以利用逗號、數字、括弧將字串批次展開。&lt;/p&gt;
&lt;p&gt;簡單的 use case:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from name_expansion import NameExpansionCore
&amp;gt;&amp;gt;&amp;gt; ne = NameExpansionCore()

&amp;gt;&amp;gt;&amp;gt; host = '[tw,hk][1-2].host[3,5].com'
&amp;gt;&amp;gt;&amp;gt; host_list = list([host])
&amp;gt;&amp;gt;&amp;gt; for match in ne.parse(host):
...   host_list = ne.expand(match, host_list)
&amp;gt;&amp;gt;&amp;gt; host_list
['tw1.host3.com', 'hk1.host3.com', 'tw1.host5.com', 'hk1.host5.com',
'tw2.host3.com', 'hk2.host3.com', 'tw2.host5.com', 'hk2.host5.com']
&lt;/pre&gt;
&lt;p&gt;Fabric 要部屬的機器是儲存在 env.hosts 裡面，型態是 list，所以我們只要在 fabfile.py 加入一個 method，將 Name expansion 批次展開的結果回存到 env.hosts 裡。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def h(curr_host):
  ne = NameExpansionCore()
  host_list = list([curr_host])
  for match in ne.parse(curr_host):
    host_list = ne.expand(match, host_list)
  env.hosts = host_list
&lt;/pre&gt;
&lt;p&gt;接著我們就可以透過 Fabric 內建指令 fab，同時指定多台機器做部屬的動作，不過執行部屬的動作是循序的，並不是平行的。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
fab h:host[1-3].com deploy
&lt;/pre&gt;
&lt;p&gt;詳細使用教學可以參照 Github repository 的說明。&lt;/p&gt;
&lt;p&gt;Github repository link: &lt;a class="reference external" href="https://github.com/hansliu/name-expansion"&gt;https://github.com/hansliu/name-expansion&lt;/a&gt;&lt;/p&gt;
</content><category term="Python"></category><category term="Github"></category></entry><entry><title>2014部落格改版</title><link href="//www.hansliu.com/posts/2014/03/2014-blog-upgrade.html" rel="alternate"></link><published>2014-03-31T10:00:00+08:00</published><updated>2014-03-31T10:00:00+08:00</updated><author><name>Hans Liu</name></author><id>tag:www.hansliu.com,2014-03-31:/posts/2014/03/2014-blog-upgrade.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://lh3.googleusercontent.com/-h71cIF3bnYo/Uzm-XVuME6I/AAAAAAAAKGE/xOzCZ3SUGsg/s1600/blog2014.png"&gt;&lt;img alt="image0" src="https://lh3.googleusercontent.com/-h71cIF3bnYo/Uzm-XVuME6I/AAAAAAAAKGE/xOzCZ3SUGsg/s800/blog2014.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;部落格搬家也逐漸接近尾聲，剩下就是一些舊部落格的收尾和導入。&lt;/p&gt;
&lt;p&gt;我的 ATOM/RSS 有使用 feedburner，所以只要更新 feedburner 的設定，它就會自動幫你通知所有的訂閱戶，並且幫用戶自動訂閱新網站的文章。&lt;/p&gt;
&lt;p&gt;比較可惜的是因為過去一直都是用 blogger 提供的 domain name，所以新部落格的 SEO 計算就要從頭開始 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://lh3.googleusercontent.com/-h71cIF3bnYo/Uzm-XVuME6I/AAAAAAAAKGE/xOzCZ3SUGsg/s1600/blog2014.png"&gt;&lt;img alt="image0" src="https://lh3.googleusercontent.com/-h71cIF3bnYo/Uzm-XVuME6I/AAAAAAAAKGE/xOzCZ3SUGsg/s800/blog2014.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;部落格搬家也逐漸接近尾聲，剩下就是一些舊部落格的收尾和導入。&lt;/p&gt;
&lt;p&gt;我的 ATOM/RSS 有使用 feedburner，所以只要更新 feedburner 的設定，它就會自動幫你通知所有的訂閱戶，並且幫用戶自動訂閱新網站的文章。&lt;/p&gt;
&lt;p&gt;比較可惜的是因為過去一直都是用 blogger 提供的 domain name，所以新部落格的 SEO 計算就要從頭開始...&lt;/p&gt;
&lt;p&gt;再來應該會想辦法設計 redirect，看能不能把舊部落格的流量重導到新部落格。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;圖片顯示&lt;/h2&gt;
&lt;p&gt;加入回應式燈箱 &lt;a class="reference external" href="http://dimsemenov.com/plugins/magnific-popup/"&gt;magnific-popup&lt;/a&gt; ，並修改相關 css，取消不必要的陰影和邊框。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/* Magnific Popup CSS */
.mfp-figure:after {
  box-shadow: none !important;
  background: none !important; }
&lt;/pre&gt;
&lt;p&gt;加入延遲載入  &lt;a class="reference external" href="http://www.appelsiini.net/projects/lazyload"&gt;lazyload&lt;/a&gt; ，讓網頁在開啟大量圖片的時候可以更順暢一點。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;外部套件&lt;/h2&gt;
&lt;p&gt;在 Google AdSense 部分使用新的回應式廣告單元，廣告排版則是參考 Jenny 的配置，放在文章的開頭與結尾，同時把 BloggerAds 也放進來，安插在首頁的側邊欄。&lt;/p&gt;
&lt;p&gt;在 Google Analytics 部分則是升級到通用分析，因為是新安裝，目前還不知道實際運作的效果。&lt;/p&gt;
&lt;/div&gt;
</content><category term="Blog"></category></entry></feed>